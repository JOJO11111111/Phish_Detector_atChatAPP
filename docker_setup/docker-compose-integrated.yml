version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: zookeeper
    ports:
      - "2182:2181"

  # Kafka for message queuing
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CREATE_TOPICS: "go-chat-message:2:0"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    depends_on:
      - zookeeper

  # MySQL database
  mysql:
    image: mysql:8.0
    container_name: chat-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root1234
      MYSQL_DATABASE: chatapp
      MYSQL_USER: tiffany
      MYSQL_PASSWORD: Tiffany0207!
    ports:
      - "3306:3306"
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Phishing Detection Service (Python Flask)
  phish-detection:
    build:
      context: .
      dockerfile: Dockerfile.phish
    container_name: phish-detection
    restart: always
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
    volumes:
      - ./datasets:/app/datasets
      - ./models:/app/models
      - ./results:/app/results
    depends_on:
      - mysql

  # Chat App Backend (Golang)
  chat-backend:
    build:
      context: ./Realtime-chat-app-golang
      dockerfile: Dockerfile
    container_name: chat-backend
    restart: always
    ports:
      - "8888:8888"
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=chatapp
      - MYSQL_USER=tiffany
      - MYSQL_PASSWORD=Tiffany0207!
      - PHISH_SERVICE_URL=http://phish-detection:5000
    depends_on:
      - mysql
      - kafka
      - phish-detection

  # Chat App Frontend (React)
  chat-frontend:
    build:
      context: ./Realtime-chat-app-react-ui
      dockerfile: Dockerfile
    container_name: chat-frontend
    restart: always
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8888
    depends_on:
      - chat-backend

  # Nginx reverse proxy
  nginx:
    image: nginx:latest
    container_name: chat-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - chat-backend
      - chat-frontend
      - phish-detection 